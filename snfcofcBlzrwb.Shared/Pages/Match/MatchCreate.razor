@page "/match/new"
@using System.Net.Http.Headers
@* @using snfcofcBlzrwb.Shared.Models
 *@
 @inject IMatchService MatchService
@inject ITeamService TeamService
@inject NavigationManager NavigationManager
<BacktoHomeButton>
    🏠 Ir al inicio
</BacktoHomeButton>

<h2 class="form-title">📅 Registro de Partido</h2>

<div class="card player-form-card">
    <div class="card-body">
        <EditForm Model="@match" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label class="form-label">Rival:</label>
                <InputSelect @bind-Value="selectedTeamId" @ValueChanged="@OnTeamSelected" class="form-control input-lg">
                    <option value="">-- Selecciona un equipo --</option>
                    @foreach (var team in teams)
                    {
                        <option value="@team.ObjectId">@team.NombreEquipo</option>
                        selectedTeam = team;
                    }
                </InputSelect>
                <button class="btn btn-outline-secondary mt-2" @onclick="CrearNuevoEquipo">
                    <i class="fas fa-plus-circle me-1"></i> Crear nuevo equipo
                </button>
            </div>

            @if (selectedTeam != null)
            {
                @if (!string.IsNullOrEmpty(selectedTeam?.FotoEscudo?.Url))
                {
                    <img src="@selectedTeam.FotoEscudo.Url" alt="Escudo" class="img-preview" />
                }
            }

            <!-- Competencia editable -->
            <div class="form-group">
                <label class="form-label">Competencia:</label>
                <InputText @bind-Value="match.Competencia" class="form-control input-lg" />
            </div>

            <div class="form-group">
                <label class="form-label">Fase de Competencia:</label>
                <InputText @bind-Value="match.FaseCompetencia" class="form-control input-lg" />
            </div>

            <div class="form-check mb-3">
                <InputCheckbox @bind-Value="match.ClaveSub" class="form-check-input" id="claveSub" />
                <label class="form-check-label" for="claveSub">Es Sub 19</label>
            </div>

            <div class="form-check mb-4">
                <InputCheckbox @bind-Value="match.ClavePlus" class="form-check-input" id="clavePlus" />
                <label class="form-check-label" for="clavePlus">Es Categoría Plus</label>
            </div>

            <div class="form-group">
                <label class="form-label">Número de Jornada:</label>
                <InputNumber @bind-Value="match.JNo" class="form-control input-lg" />
            </div>

            <div class="form-group">
                <label class="form-label">Goles a Favor:</label>
                <InputNumber @bind-Value="match.FaGoles" class="form-control input-lg" />
            </div>

            <div class="form-group">
                <label class="form-label">Goles en Contra:</label>
                <InputNumber @bind-Value="match.CoGoles" class="form-control input-lg" />
            </div>

            <div class="form-group">
                <label class="form-label">Resultado:</label>
                <InputSelect @bind-Value="match.EstatusMatchId" class="form-control input-lg">
                    <option value="0">Por jugar</option>
                    <option value="3">Ganado</option>
                    <option value="2">Empate</option>
                    <option value="1">Perdido</option>
                </InputSelect>
            </div>

            <button type="submit" class="btn btn-primary submit-button">
                <i class="fas fa-save me-2"></i> Guardar Partido
            </button>

            <footer>
                <p class="text-info">Equipo seleccionado: @match?.Rival</p>
            </footer>
        </EditForm>

        @if (!string.IsNullOrEmpty(message))
        {

            <SfMessage Severity="@currentSeverity">@message</SfMessage>
        }
    </div>
</div>


<style>
    .form-title {
        font-size: 2.2rem;
        font-weight: 700;
        text-align: center;
        margin-bottom: 30px;
        color: #2c3e50;
    }

    .player-form-card {
        border-radius: 16px;
        background-color: #ffffff;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.05);
        padding: 30px;
        max-width: 700px;
        margin: 0 auto;
    }

    .form-group {
        margin-bottom: 24px;
    }

    .form-label {
        font-weight: 600;
        margin-bottom: 8px;
        display: block;
        color: #34495e;
    }

    .input-lg {
        padding: 12px 16px;
        font-size: 1.1rem;
        border-radius: 8px;
    }

    .img-preview {
        max-width: 180px;
        max-height: 180px;
        object-fit: cover;
        border-radius: 8px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.1);
        margin-bottom: 12px;
    }

    .submit-button {
        width: 100%;
        padding: 14px;
        font-size: 1.2rem;
        font-weight: 600;
        border-radius: 10px;
        transition: all 0.3s ease;
    }

    .submit-button:hover {
        background-color: #0056b3;
        box-shadow: 0 0 12px rgba(0,0,0,0.15);
    }
</style>

@code {
    private MatchModel match = new MatchModel();
    List<TeamModel> teams = new List<TeamModel>();
    private string selectedTeamId;
    private TeamModel selectedTeam;
    private string message;
    private MessageSeverity currentSeverity = MessageSeverity.Info;

    protected override async Task OnInitializedAsync()
    {
        match = new MatchModel
        {

            IsSynced = false,
            Competencia = "Stars League"
        };

        teams = await TeamService.GetAllAsync();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if(selectedTeam != null)
            {
                match.Rival = selectedTeam.NombreEquipo;
                match.FotoRival = selectedTeam.FotoEscudo;
                match.RivalObjectId = selectedTeamId;
                await MatchService.CreateMatch(match);
                message = "Partido registrado correctamente.";
                currentSeverity = MessageSeverity.Success;
            }
            else
            {
                throw new Exception("Rival No Seleccionado correctamente");
            }

        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            currentSeverity = MessageSeverity.Warning;

        }
    }

    private void CrearNuevoEquipo()
    {
        NavigationManager.NavigateTo("/team/new");
    }

    private void OnTeamSelected(ChangeEventArgs e)
    {
        selectedTeamId = e.Value?.ToString();
        selectedTeam = teams.FirstOrDefault(t => t.ObjectId == selectedTeamId);

        if (selectedTeam != null)
        {
            match.Rival = selectedTeam.NombreEquipo;
            match.ClaveSub = selectedTeam.ClaveSub;
            match.ClavePlus = selectedTeam.ClavePlus;
            match.Competencia = selectedTeam.Competencia;
            match.FotoRival = selectedTeam.FotoEscudo;
            match.RivalObjectId = selectedTeamId;
        }
    }
}