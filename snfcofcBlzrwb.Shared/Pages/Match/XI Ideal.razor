@page "/sugested_xi/{ObjectId}"


@inject IPlayerService PlayerService
@inject IMatchService MatchService

<h3>XI Ideal</h3>

<div>
    <div class="col-lg-12 control-section">
    
    
        <div class="control-wrapper">
            <div class="inline">
                <span id="contentText" class="dropdown-size">
                    Formación seleccionada:
                    <SfDropDownList TValue="string" TItem="string" CssClass="inlinecss" Placeholder="Selecciona una formación"
                                    DataSource="@Formaciones" @bind-Value="FormacionSeleccionada"
                                    Width="150px" PopupHeight="200px" PopupWidth="200px">
                    </SfDropDownList>
                </span>
            </div>
        </div>
    </div>


    <SfButton CssClass="e-outline e-primary mt-3" Content="Actualizar XI" OnClick="SugerirXI" />

</div>
<div>
    
</div>
<div class="lineup-container">
    
    <div class="lineup-center">
        <h4>SAN FRANCISCO FC</h4>
        <p></p>


    </div>

    <div class="lineup-center">
            

            <div class="field-background">
                @foreach (var jugador in FieldPlayerList)
                {
                    <div class="player-card" style="@GetPosicionStyle(jugador.Posicion)">
                        <img src="@jugador.FotoPlayer?.Url" class="player-photo" />
                        <div class="player-label">@jugador.Nombre (@jugador.Dorsal)</div>
                    </div>
                }
            </div>
        </div>

    </div>
<h1>    </h1>
<div class="lineup-container">

    <div class="lineup-center">
        <div id="group-list">
            <SfListView CssClass="listview-group" DataSource="@GroupedListData" TValue="PlayerGroupItem">
                <ListViewFieldSettings TValue="PlayerGroupItem" Id="Id" Text="Text" GroupBy="Group"></ListViewFieldSettings>
            </SfListView>
        </div>
    </div>
</div>


<style>
    .lineup-container {
        position: relative;
        display: flex;
        flex-direction: column;
        align-items: center; /* Centra horizontalmente */
        max-width: 800px; /* Limita ancho total */
        margin: 0 auto; /* Centra el contenedor en la página */
        padding: 10px;
    }

    .lineup-center {
        flex-grow: 1;
        position: relative;
        width: 100%;
        max-width: 600px; /* Limita ancho del campo */
    }

    .field-background {
        background-image: url('/Resources/images/campo.png');
        background-size: contain; /* Ajusta para que la imagen mantenga proporción */
        background-repeat: no-repeat;
        background-position: center;
        height: 400px; /* Altura más manejable */
        position: relative;
        border: 1px solid #ccc; /* Opcional: para visualizar el área */
        border-radius: 8px;
    }

    
    .lineup-container {
        position: relative;
        display: flex;
        flex-direction: column;
    }

    .lineup-left, .lineup-right {
    width: 200px;
    }

    .lineup-center {
    flex-grow: 1;
        position: relative;
    }

    .field-background {
        background-image: url('/Resources/images/campo.png');
        background-size: cover;
    height: 600px;
    position: relative;
    }

    .player-card {
    position: absolute;
    width: 60px;
    text-align: center;
    }

    .player-photo {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid white;
    }

    .player-label {
        font-size: 10px; /* Más pequeño */
        margin-top: 2px;
        color: white;
        text-shadow: 1px 1px 2px black;
        white-space: nowrap;
    }

</style>
@code {
    [Parameter] public string ObjectId { get; set; }
    Player player = new Player();
    MatchModel Match = new MatchModel();

    List<Player> PlayerList = new List<Player>();
    List<Player> FieldPlayerList = new List<Player>();
    List<Player> Suplentes = new List<Player>();

    List<string> Formaciones = new()
    {
        "1-2-3-1", "1-3-2-1"
    };
    public string FormacionSeleccionada = "1-2-3-1";

    public class Punto
    {
        public int X { get; set; }
        public int Y { get; set; }

        public Punto(int x, int y)
        {
            X = x;
            Y = y;
        }
    }
    Dictionary<string, Dictionary<string, Point>> Posiciones = new()
    {
        ["1-2-3-1"]    = new()
        {
            ["POR"] = new Point(40, 90), // Portero
            ["LI"] = new Point(20, 70), ["LD"] = new Point(60, 70), // Defensas Laterales
            // ["DFC1"] = new Point(20,70), ["DFC2"] = new Point(90,70),
            ["MI"] = new Point(5, 50), ["MC"] = new Point(40, 50), ["MD"] = new Point(75, 50),// Mediocampistas
            ["DC"] = new Point(40, 20) // Delantero

        },
        ["1-3-2-1"] = new() 
        {
                ["POR"] = new Point(50, 90),
                ["DFC1"] = new Point(20, 70),
                ["DFC2"] = new Point(50, 70),
                ["DFC3"] = new Point(80, 70),
                ["EI"] = new Point(35, 50),
                ["MCD"] = new Point(50, 60),
                ["MCO"] = new Point(50, 35),
                ["ED"] = new Point(65, 50),
                ["DC"] = new Point(50, 20)
        }

    };
    public class PlayerGroupItem
    {
        public string Id { get; set; }       // Puede ser el ObjectId del jugador
        public string Text { get; set; }     // Texto a mostrar (ejemplo: "Dorsal - Nombre")
        public string Group { get; set; }    // Grupo: "Titulares" o "Suplentes"
    }
    List<PlayerGroupItem> GroupedListData = new List<PlayerGroupItem>();

    string GetPosicionStyle(string posicion)
    {
        if (Posiciones.TryGetValue(FormacionSeleccionada, out var mapaFormacion) &&
        mapaFormacion.TryGetValue(posicion, out var punto))
        {
            return $"left:{punto.X}%; top:{punto.Y}%;";
        }

        // Posición no encontrada
        return "left:-9999px; top:-9999px;";

    }

    void OnFormacionChanged(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, string> args)
    {
        FormacionSeleccionada = args.Value;
        // if (FieldPlayerList.Any())
        // {
        //     for (int i = 0; i < FieldPlayerList.Count; i++)
        //         FieldPlayerList[i].Posicion = i.ToString();
        // }
        SugerirXI();
    }

    async Task SugerirXI()
    {
        Match = await MatchService.GetByIdAsync(ObjectId);

        PlayerList = await PlayerService.GetAllAsync();
        var candidatos = new List<Player>();
        if (Match.ClavePlus == true)
        {
            candidatos = PlayerList
            .Where(j => j.ClavePlus == Match.ClavePlus)
            .OrderByDescending(j => j.PartidosJugados)
            .ThenByDescending(j => j.Ranking)
            .Take(Posiciones[FormacionSeleccionada].Count)
            .ToList();
        }
        else
        {
            candidatos = PlayerList
            .Where(j => j.ClaveSub == Match.ClaveSub)
            .OrderByDescending(j => j.PartidosJugados)
            .ThenByDescending(j => j.Ranking)
            .Take(Posiciones[FormacionSeleccionada].Count)
            .ToList();
        }
        var posicionesFormacion = Posiciones[FormacionSeleccionada];
        var porteros = posicionesFormacion.Where(p => p.Key == "POR").ToList();
        var defensas = posicionesFormacion.Where(p => p.Key.StartsWith("DF") || p.Key == "LI" || p.Key == "LD" || p.Key == "DFC").ToList();
        var mediocampistas = posicionesFormacion.Where(p => p.Key.StartsWith("M") || p.Key == "EI" || p.Key == "ED" || p.Key == "MC" || p.Key == "MI" || p.Key == "MD").ToList();
        var delanteros = posicionesFormacion.Where(p => p.Key == "DC" || p.Key == "MP").ToList();

        var XI = new List<Player>();
        var usados = new HashSet<string>(); // Para evitar duplicados

        // Portero
        foreach (var pos in porteros)
        {
            var jugador = candidatos
                .Where(j => !usados.Contains(j.ObjectId))
                .FirstOrDefault(j => j.Posicion == "POR");

            if (jugador != null)
            {
                jugador.Posicion = pos.Key;
                XI.Add(jugador);
                usados.Add(jugador.ObjectId);
            }
        }

        // Defensas
        foreach (var pos in defensas)
        {
            var jugador = candidatos
                .Where(j => !usados.Contains(j.ObjectId))
                .FirstOrDefault(j => j.Posicion.StartsWith("DF") || j.Posicion == "LI" || j.Posicion == "LD");

            if (jugador != null)
            {
                jugador.Posicion = pos.Key;
                XI.Add(jugador);
                usados.Add(jugador.ObjectId);
            }
        }

        // Mediocampistas
        foreach (var pos in mediocampistas)
        {
            var jugador = candidatos
                .Where(j => !usados.Contains(j.ObjectId))
                .FirstOrDefault(j => j.Posicion.StartsWith("M") || j.Posicion == "EI" || j.Posicion == "ED");

            if (jugador != null)
            {
                jugador.Posicion = pos.Key;
                XI.Add(jugador);
                usados.Add(jugador.ObjectId);
            }
        }

        // Delanteros
        foreach (var pos in delanteros)
        {
            var jugador = candidatos
                .Where(j => !usados.Contains(j.ObjectId))
                .FirstOrDefault(j => j.Posicion == "DC" || j.Posicion == "MP");

            if (jugador != null)
            {
                jugador.Posicion = pos.Key;
                XI.Add(jugador);
                usados.Add(jugador.ObjectId);
            }
        }
        Suplentes = PlayerList.Except(XI).Take(5).ToList();
        GroupedListData = new List<PlayerGroupItem>();
        foreach(var plyr in XI)
        {
            var p = new PlayerGroupItem
            {
                Id = plyr.ObjectId, Group = "XI", Text = $"{plyr.Dorsal} - { plyr.Nombre}"
            };
            GroupedListData.Add(p);
        }
        foreach(var plyr in Suplentes)
        {
            var p = new PlayerGroupItem
            {
                Id = plyr.ObjectId, Group = "Suplente", Text = $"{plyr.Dorsal} - { plyr.Nombre}"
            };
            GroupedListData.Add(p);
        }
        
        FieldPlayerList = XI;
        // StartingXI = candidatos;
        
    }

    protected override void OnInitialized()
    {
        SugerirXI();
    }
}
