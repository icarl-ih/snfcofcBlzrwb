@page "/match/view"
@inject NavigationManager NavigationManager
@inject IMatchService MatchService
@using Syncfusion.Blazor.Buttons
<h3 class="section-title">📋 Juegos Jugados</h3>

<BacktoHomeButton>
    🏠 Ir al inicio
</BacktoHomeButton>
@if (isRefreshing)
{
    <p class="text-muted"></p>
}
else
{
    @if (match != null && match.Count > 0)
    {
        <div class="row g-4">
            @foreach (var player in partidos)
            {
                <div class="col-md-6">
                    <MatchCard Match="player" />
                </div>

            }
        </div>

        <div class="d-flex justify-content-center mt-4">
            <NavButton Label="➕ Nuevo Partido"
                       TargetUrl="/match/new"
                       ButtonClass="btn btn-lg btn-success action-button"
                       ConfirmBeforeNavigate="true"
                       ConfirmMessage="¿Deseas registrar un nuevo partido?" />
        </div>
    }
    else if (showAlert)
    {
        <p class="text-muted">Jugadores cargados: @match.Count</p>
        <div class="alert alert-warning text-center" role="alert">
            No se encontraron jugadores registrados. Redirigiendo al gestor de jugadores...
        </div>
    }


}
<style>
    .section-title {
    font-size: 2rem;
    font-weight: 700;
    margin-bottom: 30px;
    text-align: center;
    color: #343a40;
    }

    .action-button {
    padding: 12px 24px;
    font-size: 1.2rem;
    font-weight: 600;
    border-radius: 8px;
    transition: all 0.3s ease;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }

    .action-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 16px rgba(0,0,0,0.15);
    }

    .row.g-4 {
    row-gap: 1.5rem;
    }

    /* .fade-in-card {
    animation: fadeInUp 0.6s ease forwards;
    opacity: 0;
    } */

    .spinner-border {
    vertical-align: middle;
    }

    .action-button:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    }

    /* keyframes fadeInUp {
    0% {
    transform: translateY(20px);
    opacity: 0;    
    }
    100% {
    transform: translateY(0);
    opacity: 1;
    }
    } */
</style>



@code {
    private List<MatchModel> match = new();
    private List<MatchModel> partidos;

    private bool showAlert = false;
    void NuevoMatch() => NavigationManager.NavigateTo("/match/new");
    private bool isRefreshing = false;

    private async Task Refesh()
    {
        isRefreshing = true;
        // Simula carga o llama a tu servicio real
        await Task.Delay(1500);
        // Aquí iría tu lógica de actualización
        isRefreshing = false;
    }
    protected override async Task OnInitializedAsync()
    {
        try
        { 
            match = await MatchService.GetAllAsync();
            partidos = match.OrderByDescending(p => p.EstatusMatchId).ToList();

        }
        catch (Exception)
        {
            if (match == null || match.Count == 0)
            {
                showAlert = true;

                // Espera breve para mostrar la alerta antes de redirigir
                await Task.Delay(10000);
                NuevoMatch();
            }
        }


        
    }
    }