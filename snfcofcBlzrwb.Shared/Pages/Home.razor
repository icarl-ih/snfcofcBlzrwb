@page "/"
@inject IPlayerService PlayerService
@inject NavigationManager NavigationManager
@inject IAuthService AuthRemoteService

@using Syncfusion.Blazor.Buttons
<h3 class="section-title">📋 Jugadores Registrados</h3>

<button class="btn btn-lg btn-primary action-button" @onclick="Refesh" disabled="@isRefreshing">
    @if (isRefreshing)
    {
        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true">Cargando...</span>

    }
    else
    {
        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true">🔄 Actualizar</span>

    }
</button>
@if (!AuthRemoteService.GetUserRoles().Contains("ReadUser"))
{
    <NavButton Label="➕ Nuevo Jugador"
           TargetUrl="/playercrud/new"
           ButtonClass="btn btn-lg btn-success action-button"
           ConfirmBeforeNavigate="true"
           ConfirmMessage="¿Deseas registrar un nuevo jugador?" />
}

<div class="chip-container">
    @*Initialize the Filter Chips component*@
    <SfChip Selection="SelectionType.Single" SelectedChips=@FilterSelected SelectedChipsChanged="OnFilterChanged" aria-label="Filter Chips">
        <ChipItems>
            <ChipItem Text="@($"Todos ({players.Count})")"></ChipItem>
            <ChipItem Text="@($"Sub 19 ({players.Where(p => p.ClaveSub == true).Count().ToString()})")"></ChipItem>
            <ChipItem Text="@($"Plus ({players.Where(p => p.ClaveSub == true).Count().ToString()})")"></ChipItem>
            <ChipItem Text="@($"Ambas Categorías ({players.Where(p => p.ClaveSub == true && p.ClavePlus == true).Count().ToString()})")"></ChipItem>

        </ChipItems>
    </SfChip>
</div>
@if (isRefreshing)
{
    <p class="text-muted"></p>
}
else
{
    
    @if (players != null && players.Count > 0)
    {
        <div class="row g-4">
            @foreach (var player in jugadoresOrdenados)
            {
                <div class="col-md-6">
                    <PlayerCard Player="player" />
                </div>

            }
        </div>
        

    }
    else if (showAlert)
    {
        <SfMessage Severity="MessageSeverity.Error">No se encontraron jugadores registrados. Actualice la página</SfMessage>   
    }


}
<footer class="mt-5 text-center">

    @* <SfButton CssClass="e-primary" IconCss="e-icons e-add" @onclick="IrANuevoJugador">
        ➕ Nuevo Jugador
    </SfButton> *@
@*     <NavButton Label="⚽ Partidos"
    TargetUrl="/match/view"
    ButtonClass="btn btn-lg btn-success action-button"
    ConfirmBeforeNavigate="true"
    ConfirmMessage="¿Deseas salir de esta página?" />
 *@
    @* <NavButton Label=" 📊 Evaluar Partidos"
               TargetUrl= "/evaluate"
               ButtonClass="btn btn-lg btn-success action-button"
               ConfirmBeforeNavigate="true"
               ConfirmMessage="¿Deseas registrar un nuevo jugador?" /> *@


</footer>

<style>
    .section-title {
    font-size: 2rem;
    font-weight: 700;
    margin-bottom: 30px;
    text-align: center;
    color: #343a40;
    }

    .action-button {
    padding: 12px 24px;
    font-size: 1.2rem;
    font-weight: 600;
    border-radius: 8px;
    transition: all 0.3s ease;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }

    .action-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 16px rgba(0,0,0,0.15);
    }

    .row.g-4 {
    row-gap: 1.5rem;
    }

    /* .fade-in-card {
    animation: fadeInUp 0.6s ease forwards;
    opacity: 0;
    } */

    .spinner-border {
    vertical-align: middle;
    }

    .action-button:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    }

    /* keyframes fadeInUp {
    0% {
    transform: translateY(20px);
    opacity: 0;    
    }
    100% {
    transform: translateY(0);
    opacity: 1;
    }
    } */
</style>



@code {
    private List<Player> players = new();
    private List<Player> jugadoresOrdenados;
    public string[] FilterSelected = { "Todos" };
    private bool showAlert = false;
    void NuevoPlayer() => NavigationManager.NavigateTo("/playercrud/new");
    private bool isRefreshing = false;

    private async Task Refesh()
    {
        isRefreshing = true;
        // Simula carga o llama a tu servicio real
        await Task.Delay(1500);
        // Aquí iría tu lógica de actualización
        isRefreshing = false;
    }
    protected override async Task OnInitializedAsync()
    {
        if (!AuthRemoteService.IsAuthenticated())
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            try
            {
                players = await PlayerService.GetAllAsync();
                jugadoresOrdenados = players.OrderByDescending(j => j.PartidosJugados)
                .ThenByDescending(j => j.Ranking).ToList();
                // FilterList = new List<string> { "Todos" };


            }
            catch (Exception)
            {
                if (players == null || players.Count == 0)
                {
                    showAlert = true;

                    // Espera breve para mostrar la alerta antes de redirigir
                    await Task.Delay(10000);
                    NuevoPlayer();
                }
            }
        }



    }
    private void IrANuevoJugador()
    {
        NavigationManager.NavigateTo("/playercrud/new");
    }

    private void IrANuevoPartido()
    {
        NavigationManager.NavigateTo("/match/view");
    }

    private void IrAEvaluaciones()
    {
        NavigationManager.NavigateTo("/evaluate");
    }

    void OnFilterChanged(string[] selectedChips)
    {
        FilterSelected = selectedChips;
        if (FilterSelected.Length == 0)
        {
            FilterSelected =  ["Todos (0)"] ;
        }
        if (FilterSelected.Contains("Todos (0)"))
        {
            // Mostrar todos los jugadores si "Todos" está seleccionado o no hay filtro
            jugadoresOrdenados = players.OrderByDescending(j => j.PartidosJugados)
            .ThenByDescending(j => j.Ranking).ToList();
        }
        else if (FilterSelected.Contains("Ambas Categorías (0)"))
        {
            jugadoresOrdenados = players.Where(p=>p.ClaveSub == true &&p.ClavePlus == true).OrderByDescending(p => p.Ranking).ToList();
        }
        else
        {
            // Filtrar según las categorías seleccionadas
            jugadoresOrdenados = players.Where(j =>
                (FilterSelected.Contains("Sub 19 (0)") && j.ClaveSub) ||
                (FilterSelected.Contains("Plus (0)") && j.ClavePlus)
            ).OrderByDescending(p => p.Ranking).ToList();
        }
    }


}
