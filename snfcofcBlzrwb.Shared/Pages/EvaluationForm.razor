@page "/evaluate/{PlayerId}"
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using System.Net.Http.Headers
@inject HttpClient Http
@inject IAuthService AuthRemoteService

@inject IPlayerService PlayerService
@inject IMatchService MatchService
@inject IEvaluationService EvaluationService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>📋 Evaluación de Jugador</h3>

@if (IsLoading)
{
    <div class="d-flex justify-content-center align-items-center" style="height:200px;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    </div>
}
else if (Player == null)
{
    <p class="text-danger">No se encontró el jugador.</p>
}
else if (Matches == null || PartidosPendientes.Count == 0)
{
    <p class="text-danger">No hay partidos para evaluar</p>    
}
else
{
    <EditForm Model="@Evaluation" OnValidSubmit="SaveEvaluation">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Sección de jugador -->
        <SfCard CssClass="sf-card-custom mb-4">
            <CardHeader>
                <div class="d-flex align-items-center">
                    <img src="@(Player?.FotoPlayer?.Url ?? "img/default.png")"
                    class="rounded-circle me-3"
                    style="height: 100px;" />
                    <h5>@Player.Nombre</h5>
                    <p class="text-muted">
                        Categoría: @(
                        Player.ClavePlus
                        ? (Player.ClaveSub ? "Ambas Categorías" : "Plus")
                        : (Player.ClaveSub ? "Sub 19" : "Sin Categoría")
                                        )
                    </p>
                </div>
            </CardHeader>

            <CardContent>
                <h6>Evaluaciones anteriores</h6>
                <ul class="list-group">
                    @if (PartidosEvaluados != null && PartidosEvaluados.Any())
                    {
                        @foreach (var eval in PartidosEvaluados)
                        {
                            @if (eval.ClavePlus == true)
                            {
                                <li class="list-group-item d-flex justify-content-between">
                                    <span>🆚 @eval.Rival (PLUS)</span>
                                    <span class="badge bg-primary">@((EstatusMatch)eval.EstatusMatchId)</span>
                                </li>
                            }
                            else
                            {
                                <li class="list-group-item d-flex justify-content-between">
                                    <span>🆚 @eval.Rival (SUB 19)</span>
                                    <span class="badge bg-primary">@((EstatusMatch)eval.EstatusMatchId)</span>
                                </li>
                            }

                        }
                    }
                    else
                    {
                        <li class="list-group-item text-muted">Sin evaluaciones</li>
                    }
                </ul>
            </CardContent>
        </SfCard>

        <!-- Selección de partido -->
        <SfCard CssClass="sf-card-custom mb-4">
            <CardHeader>
                <h6>Partido a evaluar</h6>
            </CardHeader>

            <CardContent>
                <label class="form-label"><strong>Selecciona partido:</strong></label>

                <InputSelect Value="@SelectedMatchId"
                ValueChanged="@ValueChangedCallback"
                ValueExpression="() => SelectedMatchId"
                class="form-select">
                    <option value="">-- Selecciona --</option>
                    @foreach (var partido in PartidosPendientes)
                    {
                        <option value="@partido.ObjectId">🆚 @partido.Rival</option>
                    }
                </InputSelect>


                @* @if (PartidosPendientes is not null && PartidosPendientes.Any())
        {
            @foreach (var partido in PartidosPendientes)
            {
                <option value="@partido.ObjectId">🆚 @partido.Rival</option>
            }
        } *@

            </CardContent>
        </SfCard>

        <!-- Asistencia -->
        <SfCard CssClass="sf-card-custom mb-4">
            <CardHeader><CardTitle>Asistencia</CardTitle></CardHeader>
            <CardContent>
                <SfCheckBox TChecked="bool" @bind-Checked="Evaluation.Asistio">Asistió al juego (50pts)</SfCheckBox>

                @if (MostrarCamposEvaluacion)
                {

                    <SfCheckBox TChecked="bool"
                    Checked="@Evaluation.FuePuntual"
                    CheckedChanged="@((bool value) => Evaluation.FuePuntual = value)"
                    ValueExpression="() => Evaluation.FuePuntual"
                    Enabled="@Evaluation.Asistio">
                        Fue puntual (50pts)
                    </SfCheckBox>

                    @if (Evaluation.FuePuntual)
                    {
                        <div class="mb-2">
                            <label>Minutos antes del juego:</label>
                            <InputNumber @bind-Value="Evaluation.MinutosAntes" class="form-control" />
                        </div>
                    }
                }
            </CardContent>
        </SfCard>

        @if (MostrarCamposEvaluacion)
        {
            <!-- Evaluación Técnica -->
            <SfCard CssClass="sf-card-custom mb-4">
                <CardHeader><CardTitle>Evaluación Técnica</CardTitle></CardHeader>
                <CardContent>
                    <div class="slider-container">
                        <label for="fieldSkillSlider"><strong>Habilidad en el campo (1–10):</strong> @Evaluation.FieldSkillScore</label>
                        <input type="range" id="fieldSkillSlider" min="1" max="10" step="1"
                        @bind="Evaluation.FieldSkillScore" class="slider" />
                    </div>

                </CardContent>
            </SfCard>

            <!-- Disciplina -->
            <SfCard CssClass="sf-card-custom mb-4">
                <CardHeader><CardTitle>Disciplina (30%)</CardTitle></CardHeader>
                <CardContent>
                    <SfCheckBox TChecked="bool"
                    Checked="@Evaluation.RespetaCompaneros"
                    CheckedChanged="@((bool value) => Evaluation.RespetaCompaneros = value)"
                    ValueExpression="() => Evaluation.RespetaCompaneros">
                        Respeta a sus compañeros (20pts)
                    </SfCheckBox>

                    <SfCheckBox TChecked="bool"
                    Checked="@Evaluation.RespetaTecnico"
                    CheckedChanged="@((bool value) => Evaluation.RespetaTecnico = value)"
                    ValueExpression="() => Evaluation.RespetaTecnico">
                        Respeta al cuerpo técnico (20pts)
                    </SfCheckBox>

                    <SfCheckBox TChecked="bool"
                    Checked="@Evaluation.RespetaArbitro"
                    CheckedChanged="@((bool value) => Evaluation.RespetaArbitro = value)"
                    ValueExpression="() => Evaluation.RespetaArbitro">
                        Respeta al cuerpo arbitral (20pts)
                    </SfCheckBox>
                    <div class="mb-2">
                        <label>Tarjetas recibidas:</label>
                        <InputNumber @bind-Value="Evaluation.Tarjetas" class="form-control" />
                    </div>
                    <div class="mb-2">
                        <label>Faltas por lenguaje:</label>
                        <InputNumber @bind-Value="Evaluation.FaltasLenguaje" class="form-control" />
                    </div>
                </CardContent>
            </SfCard>
        }

        <!-- Comentarios -->
        <InputTextArea  @bind-Value="Evaluation.Comentarios" Placeholder="Comentarios del entrenador" Rows="4" />

        <!-- Puntaje calculado -->
        @* <SfCard CssClass="sf-card-custom mb-4">
            <CardHeader><CardTitle>Puntaje Calculado</CardTitle></CardHeader>
            <CardContent>
                <SfProgressBar Value="@PuntajeCalculado" Minimum="0" Maximum="5"
                               Text="@(PuntajeCalculado.ToString("0.00") + " / 5")" />
            </CardContent>
        </SfCard> *@

        <SfMessage Severity="@currentSeverity">@errorMessage</SfMessage>

        <SfButton Type="Submit" CssClass="e-primary mt-3">Guardar Evaluación</SfButton>
    </EditForm>
}

<style>
    h3 {
    font-weight: 600;
    color: #2c3e50;
    margin-bottom: 1rem;
    border-bottom: 2px solid #3498db;
    padding-bottom: 0.5rem;
    }

    h5 {
    font-weight: 600;
    color: #34495e;
    }

    h6 {
    font-weight: 500;
    color: #2980b9;
    margin-bottom: 0.75rem;
    }

    .sf-card-custom {
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.08);
    border: 1px solid #e0e0e0;
    padding: 1rem;
    background-color: #fff;
    }

    input[type="checkbox"] {
    accent-color: #3498db;
    }

    label {
    font-weight: 500;
    margin-bottom: 0.25rem;
    color: #2c3e50;
    }

    .form-control {
    border-radius: 8px;
    border: 1px solid #ccc;
    padding: 0.5rem 0.75rem;
    }

    .list-group-item {
    border: none;
    padding: 0.75rem 1rem;
    background-color: #f9f9f9;
    margin-bottom: 0.5rem;
    border-radius: 8px;
    }

    .badge.bg-primary {
    background-color: #3498db;
    font-size: 0.85rem;
    padding: 0.4em 0.6em;
    }

    .e-slider-container {
    margin-top: 1rem;
    }

    .e-progressbar {
    height: 20px;
    border-radius: 10px;
    background-color: #ecf0f1;
    }

    .e-progressbar .e-progress {
    background-color: #27ae60;
    }

    .e-primary {
    background-color: #2980b9;
    border-color: #2980b9;
    font-weight: 600;
    padding: 0.6rem 1.2rem;
    border-radius: 8px;
    }

    .slider-container {
    margin-top: 1rem;
    }

    input[type="range"].slider {
    -webkit-appearance: none;
    width: 100%;
    height: 8px;
    border-radius: 5px;
    background: #ddd;
    outline: none;
    padding: 0;
    margin-top: 0.5rem;
    }

    input[type="range"].slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 24px;
    height: 24px;
    background: #2980b9;
    cursor: pointer;
    border-radius: 50%;
    border: 2px solid #1c5980;
    margin-top: -8px; /* Centrar el thumb */
    transition: background 0.3s ease;
    }

    input[type="range"].slider::-webkit-slider-thumb:hover {
    background: #1c5980;
    }

    /* Firefox */
    input[type="range"].slider::-moz-range-thumb {
    width: 24px;
    height: 24px;
    background: #2980b9;
    cursor: pointer;
    border-radius: 50%;
    border: 2px solid #1c5980;
    transition: background 0.3s ease;
    }

    input[type="range"].slider::-moz-range-thumb:hover {
    background: #1c5980;
    }
</style>

@code {
    Player Player;
    [Parameter] public string PlayerId { get; set; }
    MatchModel SelectedMatch = new MatchModel();
    List<MatchModel> Matches = new List<MatchModel>();
    List<MatchModel> PartidosPendientes = new List<MatchModel>();
    List<MatchModel> PartidosEvaluados = new List<MatchModel>();
    PlayerEvaluation Evaluation = new PlayerEvaluation();
    List<PlayerEvaluation> Evaluaciones = new List<PlayerEvaluation>();
    private string SelectedMatchId;
    private int MatchIdSts;
    private bool MostrarCamposEvaluacion => Evaluation.Asistio;
    private float PuntajeCalculado => CalcularPuntaje();
    private string errorMessage; private MessageSeverity currentSeverity = MessageSeverity.Info;

    private bool IsLoading = true;

    private EventCallback<string> ValueChangedCallback =>
    EventCallback.Factory.Create<string>(this, OnMatchSelected);

    public enum EstatusMatch
    {
        Pendiente = 0,
        Perdido = 1,
        Empatado = 2,
        Ganado = 3
    }
    public enum MatchId
    {
        Pendiente = 0,
        Perdido = 1,
        Empatado = 2,
        Ganado = 3
    }

    protected override async Task OnInitializedAsync()
    {
        if (!AuthRemoteService.IsAuthenticated())
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            try
            {
                if (string.IsNullOrEmpty(PlayerId))
                    throw new Exception("Sin PlayerID");

                Player = await PlayerService.GetByIdAsync(PlayerId);

                if (Player == null)
                    throw new Exception($"Jugador con ID {PlayerId} no encontrado.");

                Matches = await MatchService.GetAllAsync();
                Evaluaciones = await EvaluationService.GetAllAsync();

                // IDs de partidos ya evaluados por este jugador
                // var evaluadosIds = Evaluaciones
                //     .Where(e => e.PlayerObjectId == PlayerId)
                //     .Select(e => e.MatchObjectId)
                //     .ToHashSet();

                var evaluadosIds = await EvaluationService.GetEvaluadosIds(PlayerId);
                // PartidosPendientes = Matches
                //     .Where(m => m.EstatusMatchId != 0)
                //     .Where(m => m.ClaveSub == Player.ClaveSub || m.ClavePlus == Player.ClavePlus)
                //     .Where(m => !evaluadosIds.Contains(m.ObjectId))
                //     .ToList();
                PartidosPendientes = await MatchService.GetUnEvaluatedMatches(evaluadosIds, Player);

                PartidosEvaluados = Matches
                    .Where(m => evaluadosIds.Contains(m.ObjectId))
                    .ToList();
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
                currentSeverity = MessageSeverity.Error;
            }
            finally
            {
                IsLoading = false;
            }
        }


    }
    private void OnAsistioChanged(bool value)
    {
        Evaluation.Asistio = value;

    }
    private float CalcularPuntaje()
    {
        if (!Evaluation.Asistio) return 0;

        float habilidad = Evaluation.FieldSkillScore * 0.2f;

        int disciplina = 0;
        if (Evaluation.RespetaCompaneros) disciplina += 20;
        if (Evaluation.RespetaTecnico) disciplina += 20;
        if (Evaluation.RespetaArbitro) disciplina += 20;

        disciplina += Evaluation.Tarjetas switch
        {
            0 => 20,
            1 => 5,
            _ => 0
        };

        disciplina += Evaluation.FaltasLenguaje switch
        {
            0 => 20,
            1 or 2 => 3,
            _ => 0
        };

        float disciplinaScore = disciplina * 0.3f / 100f;

        int asistencia = Evaluation.Asistio ? 50 : 0;
        asistencia += Evaluation.FuePuntual ? 50 : 0;
        float asistenciaScore = asistencia * 0.5f / 100f;

        float totalScore = habilidad + disciplinaScore + asistenciaScore;
        return totalScore;
    }

    async Task SaveEvaluation()
    {
        try
        {
            Evaluation.PlayerObjectId = PlayerId;
            Evaluation.PlayerObjectId = Player.ObjectId;
            Evaluation.MatchObjectId = SelectedMatch.ObjectId;

            var player = await PlayerService.GetByIdAsync(PlayerId);
            if (Evaluation.Asistio)
            {
                player.PartidosJugados += 1;
                switch (SelectedMatch.EstatusMatchId)
                {
                    case 3: player.PartidosGanados += 1; break;
                    case 2: player.PartidosEmpate += 1; break;
                    case 1: player.PartidosPerdidos += 1; break;

                }
            }
            player.Ranking = (player.Ranking + PuntajeCalculado) / 2f;

            await PlayerService.SaveAsync(player);
            await EvaluationService.CreateEvaluationAsync(Evaluation);
            if (PlayerService.SaveAsync(player).IsCompletedSuccessfully && EvaluationService.CreateEvaluationAsync(Evaluation).IsCompletedSuccessfully)
            {
                errorMessage = "Evaluación y Nuevo ranking guardado correctamente";
                currentSeverity = MessageSeverity.Success;
            }
        }catch(Exception ex)
        {
            errorMessage = ex.Message;
            currentSeverity = MessageSeverity.Error;
        }

    }


    private Task OnMatchSelected(string nuevoId)
    {
        SelectedMatchId = nuevoId;

        var partidoSeleccionado = PartidosPendientes.FirstOrDefault(p => p.ObjectId == nuevoId);
        if (partidoSeleccionado != null)
        {
            Console.WriteLine($"Partido seleccionado: {partidoSeleccionado.Rival}");
            SelectedMatch = partidoSeleccionado;
            Evaluation.MatchObjectId = SelectedMatchId;
            Evaluation.PlayerObjectId = PlayerId;
            Evaluation.EstatusPartido = SelectedMatch.EstatusMatchId;
            // Aquí puedes cargar datos del partido, jugadores, etc.
        }
        return Task.CompletedTask;

    }
    

}
