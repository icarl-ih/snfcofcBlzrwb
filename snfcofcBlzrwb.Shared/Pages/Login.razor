@page "/login"
@layout LoginLayout
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Notifications
@using System.ComponentModel.DataAnnotations
@using System.Diagnostics
@using snfcofcBlzrwb.Shared.Models
@using snfcofcBlzrwb.Shared.Services
@using snfcofcBlzrwb.Shared.Services.Remote
@using static snfcofcBlzrwb.Shared.Pages.Login
@using snfcofcBlzrwb.Shared.Layout
@inject IAuthService AuthRemoteService
@inject NavigationManager NavigationManager
@inject ToastService ToastService



@* <h3 class="login-title">Inicio de Sesión</h3>
 *@
<div class="login-wrapper">
    <div class="login-container">
        <h3 class="login-title">Inicio de Sesión</h3>

        <div class="login-field">
            <label for="usuario">Usuario:</label>
            <SfTextBox @bind-Value="username"  Placeholder="Ingresa tu usuario" FloatLabelType="FloatLabelType.Auto" CssClass="input-style input-uppercase" />
        </div>

        <div class="login-field">
            <label for="password">Contraseña:</label>
            <SfTextBox  @bind-Value="password" Type="InputType.Password" Placeholder="Ingresa tu contraseña" FloatLabelType="FloatLabelType.Auto" CssClass="input-style" />
        </div>

        <div class="login-button">
            <SfButton CssClass="e-primary" OnClick="HandleLogin" Disabled="@isLoggingIn">
                @if (isLoggingIn)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    <span>Ingresando...</span>
                }
                else
                {
                    <span>Ingresar</span>
                }
            </SfButton>

        </div>
        @if (!string.IsNullOrEmpty(errorMessage))
        {

            <SfMessage Severity="@currentSeverity">@errorMessage</SfMessage>
        }


    </div>
</div>

<style>
    

    body, html {
        height: 100%;
        margin: 5%;
    }

    .login-wrapper {
        height: 85%;
        display: grid;
        justify-content: center;
        align-items: center;
         /* 100% de la altura de la ventana */
        background-color: #f0f2f5;
    }

    .login-container {
        max-width: 90%;
        width: 100%;
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        background-color: #ffffff;
/*         border: 2px dashed red;
 */    }

    .login-title {
        text-align: center;
        margin-bottom: 20px;
        font-weight: 600;
        color: #333;
    }

    .login-field {
        margin-bottom: 20px;
    }

    .input-style {
        width: 100%;
    }

    .login-button {
        text-align: center;
    }

    .input-uppercase input {
        text-transform: uppercase;
    }
</style>            
@code {
    SfToast? ToastObj;

    private LoginModel login = new LoginModel();
    private bool isLoggingIn = false;
    private string username;
    private string password;
    private string errorMessage;
    private string ToastContent = "Conference Room 01 / Building 135 10:00 AM-10:30 AM";
    private MessageSeverity currentSeverity = MessageSeverity.Info;


    private async Task ShowToast()
    {
        // await Task.Run();
        await Task.Delay(1000); // deja respirar al UI


        await InvokeAsync(async () =>
        {
            Console.WriteLine($"[PERF] ShowToast Iniciado {DateTime.Now:HH:mm:ss.ffff}");
            await ToastService.ShowInfo("Demo: Prueba1");

        });
        Console.WriteLine($"[PERF] Show Toast finalizado en {DateTime.Now:HH:mm:ss.ffff}");

        // await ToastService.ShowInfo("Demo: Prueba1");
    }
    private string Toastposition = "Center";
    private string ToastY = "Top";
    // private List<ToastModel> Toast = new List<ToastModel>
    // {
    //     new ToastModel{ Title = "Warning!", Content="There was a problem with your network connection.", CssClass="e-toast-warning", Icon="e-warning toast-icons" },
    //     new ToastModel{ Title = "Success!", Content="Acceso correcto . . . \n Iniciando sistema", CssClass="e-toast-success", Icon="e-success toast-icons" },
    //     new ToastModel{ Title = "Error!", Content="Usuario/Contraseña inválido, revisa tu informcación", CssClass="e-toast-danger", Icon="e-error toast-icons" },
    //     new ToastModel{ Title = "Information!", Content="Please read the comments carefully.", CssClass="e-toast-info", Icon="e-info toast-icons" }
    // };

    private async Task HandleLogin()
    {
        isLoggingIn = true;
        StateHasChanged();
        try
        {
            login = new LoginModel()
            {
                Username = username.ToUpper(),
                Password = password
            };
            var result = await Task.Run(() => AuthRemoteService.ValidateUserAsync(login.Username, login.Password));

            if (AuthRemoteService.IsAuthenticated())
            {
                NavigationManager.NavigateTo("/");
                errorMessage = "Usuario Autenticado";
                currentSeverity = MessageSeverity.Success;
                await InvokeAsync(async () => await ToastService.ShowSuccess(errorMessage));
            }
            else
            {
                errorMessage = "Error al autenticar usuario. Intente más tarde";
                currentSeverity = MessageSeverity.Error;
            }


        }catch (Exception ex)
        {
            if (ex.Message.Contains("null")){
                errorMessage = "Verifica que todos los campos estén capturados";
                currentSeverity = MessageSeverity.Warning;
            }
            else if (ex.Message.Contains("201"))
            {
                errorMessage = "Se requiere contraseña"; currentSeverity = MessageSeverity.Warning;
            }else if (ex.Message.Contains("101"))
            {
                errorMessage = "Usuario/Contraseña Inválida"; currentSeverity = MessageSeverity.Warning;
            }
            else
            {
                errorMessage = ex.Message;
                currentSeverity = MessageSeverity.Warning;
            }
        }
        finally
        {
            isLoggingIn = false;
            StateHasChanged(); 
        }

    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Usuario requerido")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Contraseña requerida")]
        public string Password { get; set; }
    }

}