@page "/login"
@layout LoginLayout
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Notifications
@using System.ComponentModel.DataAnnotations
@using System.Diagnostics
@using snfcofcBlzrwb.Shared.Models
@using snfcofcBlzrwb.Shared.Services
@using snfcofcBlzrwb.Shared.Services.Remote
@using static snfcofcBlzrwb.Shared.Pages.Login
@using snfcofcBlzrwb.Shared.Layout
@inject IAuthService AuthRemoteService
@inject NavigationManager NavigationManager
@inject ToastService ToastService



@* <h3 class="login-title">Inicio de Sesión</h3>
 *@
<div class="login-wrapper">
    <div class="login-container">
        <h3 class="login-title">Inicio de Sesión</h3>

        <div class="login-field">
            <label for="usuario">Usuario:</label>
            <SfTextBox @bind-Value="username"  Placeholder="Ingresa tu usuario" FloatLabelType="FloatLabelType.Auto" CssClass="input-style input-uppercase" />
        </div>

        <div class="login-field">
            <label for="password">Contraseña:</label>
            <SfTextBox  @bind-Value="password" Type="InputType.Password" Placeholder="Ingresa tu contraseña" FloatLabelType="FloatLabelType.Auto" CssClass="input-style" />
        </div>

        <div class="login-button">
            <SfButton CssClass="e-primary" Content="Ingresar" OnClick="HandleLogin" />
        </div>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p>@errorMessage</p>
        }

            @* <SfToast @ref="ToastObj" ShowCloseButton="true" Timeout="4000" CssClass="e-toast-danger" Title="Error de autenticación" Content="@errorMessage">
                <ToastPosition X="@Toastposition"></ToastPosition>
                <ToastPosition Y="@ToastY"/>
            </SfToast>
         *@
    </div>
</div>
@* <SfToast ID="toast_default" @ref="ToastObj" Title="Adaptive Tiles Meeting" Content="@ToastContent" Timeout="10000">
    <ToastPosition X="Center"></ToastPosition>
</SfToast>
 *@
<div class="col-lg-12 col-sm-12 col-md-12 center">
    <div id="toastBtnDefault" style="margin: auto;text-align: center">
        <SfButton @onclick="@ShowToast"> Show Toast </SfButton>
    </div>
</div>

<style>
    #toast_default .e-meeting::before {
        content: "\e705";
        font-size: 17px;
    }

    @@font-face {
        font-family: 'Toast_icons';
        src: url(data:application/x-font-ttf;charset=utf-8;base64,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) format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    #toast_types button {
        margin: 5px;
        min-width: 160px;
        max-width: 160px;
    }

    .toast-icons {
        font-family: 'Toast_icons' !important;
        speak: none;
        font-size: 55px;
        font-style: normal;
        font-weight: normal;
        font-variant: normal;
        text-transform: none;
        line-height: 1;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    #toast_type .e-toast-icon.e-icons {
        height: auto;
        font-size: 30px;
    }

    .bootstrap5 #toast_type .e-toast-icon.e-icons,
    .bootstrap5-dark #toast_type .e-toast-icon.e-icons {
        height: 25px;
    }

    .toast-icons.e-success::before {
        content: "\e701";
    }

    .toast-icons.e-error::before {
        content: "\e700";
    }

    .toast-icons.e-info::before {
        content: "\e704";
    }

    .toast-icons.e-warning::before {
        content: "\e703";
    }

    #toast_types {
        text-align: center;
    }



    body, html {
        height: 100%;
        margin: 5%;
    }

    .login-wrapper {
        height: 85%;
        display: grid;
        justify-content: center;
        align-items: center;
         /* 100% de la altura de la ventana */
        background-color: #f0f2f5;
    }

    .login-container {
        max-width: 90%;
        width: 100%;
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        background-color: #ffffff;
/*         border: 2px dashed red;
 */    }

    .login-title {
        text-align: center;
        margin-bottom: 20px;
        font-weight: 600;
        color: #333;
    }

    .login-field {
        margin-bottom: 20px;
    }

    .input-style {
        width: 100%;
    }

    .login-button {
        text-align: center;
    }

    .input-uppercase input {
        text-transform: uppercase;
    }
</style>            
@code {
    SfToast? ToastObj;

    private LoginModel login = new LoginModel();

    private string username;
    private string password;
    private string errorMessage;
    private string ToastContent = "Conference Room 01 / Building 135 10:00 AM-10:30 AM";

    private async Task ShowToast()
    {
        // await Task.Run();
        await Task.Delay(1000); // deja respirar al UI


        await InvokeAsync(async () =>
        {
            Console.WriteLine($"[PERF] ShowToast Iniciado {DateTime.Now:HH:mm:ss.ffff}");
            await ToastService.ShowInfo("Demo: Prueba1");

        });
        Console.WriteLine($"[PERF] Show Toast finalizado en {DateTime.Now:HH:mm:ss.ffff}");

        // await ToastService.ShowInfo("Demo: Prueba1");
    }
    private string Toastposition = "Center";
    private string ToastY = "Top";
    // private List<ToastModel> Toast = new List<ToastModel>
    // {
    //     new ToastModel{ Title = "Warning!", Content="There was a problem with your network connection.", CssClass="e-toast-warning", Icon="e-warning toast-icons" },
    //     new ToastModel{ Title = "Success!", Content="Acceso correcto . . . \n Iniciando sistema", CssClass="e-toast-success", Icon="e-success toast-icons" },
    //     new ToastModel{ Title = "Error!", Content="Usuario/Contraseña inválido, revisa tu informcación", CssClass="e-toast-danger", Icon="e-error toast-icons" },
    //     new ToastModel{ Title = "Information!", Content="Please read the comments carefully.", CssClass="e-toast-info", Icon="e-info toast-icons" }
    // };

    private async Task HandleLogin()
    {
        try
        {
            login = new LoginModel()
            {
                Username = username.ToUpper(),
                Password = password
            };
            var sw = Stopwatch.StartNew();
            Console.WriteLine($"[PERF] Login Iniciado {DateTime.Now:HH:mm:ss.ffff}");
            var result = await Task.Run(() => AuthRemoteService.ValidateUserAsync(login.Username, login.Password));
            sw.Stop();
            Console.WriteLine($"[PERF] Login Terminado {DateTime.Now:HH:mm:ss.ffff}");

            // var roles = await AuthRemoteService.ObtenerRolesUsuarioAsync(result.objectId,result.sessionToken);

            if (AuthRemoteService.IsAuthenticated())
            {
                NavigationManager.NavigateTo("/");
                errorMessage = "Usuario Autenticado";
                await InvokeAsync(async () => await ToastService.ShowSuccess(errorMessage));
            }
            else
            {
                errorMessage = "Error al autenticar usuario. Intente más tarde";
            }


        }catch (Exception ex)
        {
            if (ex.Message.Contains("null")){
                errorMessage = "Verifica que todos los campos estén capturados";
            }
            else if (ex.Message.Contains("201"))
            {
                errorMessage = "Se requiere contraseña";
            }else if (ex.Message.Contains("101"))
            {
                errorMessage = "Usuario/Contraseña Inválida";
            }
            else
            {
                errorMessage = ex.Message;
            }
            // errorMessage = ex.Message;
            await InvokeAsync(async () =>
        {
            Console.WriteLine($"[PERF] ShowToast Iniciado {DateTime.Now:HH:mm:ss.ffff}");
            await ToastService.ShowInfo(errorMessage);

        });
            Console.WriteLine($"[PERF] Show Toast finalizado en {DateTime.Now:HH:mm:ss.ffff}");
        }

        // if (username == "admin" && password == "1234")
        // {
        //     NavigationManager.NavigateTo("/");
        // }
        // else
        // {
        //     errorMessage = "Usuario o contraseña incorrectos";
        // }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Usuario requerido")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Contraseña requerida")]
        public string Password { get; set; }
    }

}